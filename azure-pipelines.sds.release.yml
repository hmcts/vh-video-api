name: $(Date:yyyyMMddHHmm)-$(Rev:r)

trigger: none

pr: none

resources:
  repositories:
    - repository: azTemplates
      type: github
      name: hmcts/azure-devops-templates
      ref: master
      endpoint: hmcts

parameters:
- name: environment
  type: object
  default:
  - Demo
  - Prod

pool: 
  vmImage: ubuntu-22.04

#####################################################
# Pre-Release Tasks. ################################
stages:
- ${{ if contains(variables['Build.SourceBranch'], 'refs/heads/release') }}:
  - stage: Pre_Run_Tasks
    displayName: Pre-Release Tasks
    variables:
    - template: variables/shared.yaml
    - template: variables/production.yaml
    jobs:
    - job: Generate_Entity_Framework_Script
      displayName: "Generate Entity Framework Script"
      steps:
      - template: templates/Database/EntityFramework/generate-script.yaml@azTemplates
        parameters:
          outputPath: $(Build.StagingDirectory)
          contextName: ${{ variables.efContextName }}
          workingPath: $(System.DefaultWorkingDirectory)/VideoApi/VideoApi
          projectName: ${{ variables.efProjectName }}
          migrationsPath: VideoApi/VideoApi.DAL/Migrations

    - job: Package_Nuget
      displayName: "Package Nuget Packages"
      steps:
        - template: templates\dotnet\package-nuget-packages.yml@azTemplates
          parameters:
            nugetProjectPath: 'VideoApi/${{ variables.nuget_package_name }}'
            vstsFeed: "${{ variables.nuget_org_name }}/${{ variables.nuget_feed_name }}"
            gitVersionConfigPath: ${{ variables.git_version_config_path }}
        
  #####################################################
  # Approval Gate for EF. #############################
  - stage: Approve_Entity_Framework
    displayName: 'Approve EF Release'
    jobs:
    - job: waitForValidation
      displayName: 'Approve Entity Framework'
      pool: server
      timeoutInMinutes: 4320 
      steps:
      - task: ManualValidation@0
        timeoutInMinutes: 1440
        inputs:
          instructions: 'Please Approve to Run Entity Framework Release...'
          onTimeout: 'reject'

  #####################################################
  # Run Entity Framework. #####################
  - ${{ each env in parameters.environment }}:
    - stage: Run_Entity_Framework_${{ env }}
      displayName: ${{ env }} EF Release
      dependsOn: Approve_Entity_Framework
      variables:
      - ${{ if eq(env, 'Demo') }}:
        - template: variables/demo.yaml
      - ${{ if eq(env, 'Prod') }}:
        - template: variables/production.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
      jobs:
      - job: Run_Entity_Framework_${{ env }}
        pool:
          vmImage: 'windows-latest'
        displayName: Run Entity Framework ${{ env }}
        steps:
        - download: current
          displayName: Download Sql Artifact

        - ${{ if or( eq(env, 'Staging'), eq(env, 'Prod') ) }}: 
          - template: templates/Azure/Common/unlock-lock.yaml@azTemplates
            parameters:
              addOrDelete: delete
              lockName: "${{ variables.env }}-lock"
              resourceGroup: ${{ variables.vhResourceGroup }}
              azureSubscription: ${{ variables.subscriptionName }}

        - template: templates/Database/EntityFramework/run-entity-framework.yaml@azTemplates
          parameters:
            sqlServerResourceGroup: ${{ variables.vhResourceGroup }}
            sqlServerName: ${{ variables.vhSQLServerName }}
            databaseName: ${{ variables.VideoApiDbName }}
            azureSubscription: ${{ variables.subscriptionName }}
            sqlScriptLocation: "$(Pipeline.Workspace)/${{ variables.efContextName }}-$(Build.BuildId)/${{ variables.efContextName }}.sql"
            kvfirewallRequired: false
            kvName: ${{ variables.vhKeyVault }}
            kvSqlPasswordSecret: ${{ variables.vhSqlPasswordSecret }}
            kvSqlUsernameSecret: ${{ variables.vhSqlUsernameSecret }}

        - ${{ if or( eq(env, 'Staging'), eq(env, 'Prod') ) }}: 
          - template: templates/Azure/Common/unlock-lock.yaml@azTemplates
            parameters:
              addOrDelete: add
              lockName: "${{ variables.env }}-lock"
              resourceGroup: ${{ variables.vhResourceGroup }}
              azureSubscription: ${{ variables.subscriptionName }}
              lockType: CanNotDelete

  #####################################################
  # Approval Gate for Video API Release. ############
  - stage: Approve_Helm_Release
    displayName: 'Approve Helm Release'
    dependsOn: 
    - Run_Entity_Framework_Demo
    - Run_Entity_Framework_Prod
    jobs:
    - job: waitForValidation
      displayName: 'Approve Helm Release'
      pool: server
      timeoutInMinutes: 4320
      steps:
      - task: ManualValidation@0
        timeoutInMinutes: 1440 
        inputs:
          instructions: 'Please Approve for Helm Release...'
          onTimeout: 'reject'

  #####################################################
  # Build Docker Image & Push. ########################
  - stage: Docker_Build_Push
    displayName: Docker Build & Push Image
    dependsOn: Approve_Helm_Release
    variables:
    - template: variables/production.yaml
    - template: variables/shared.yaml
    jobs:
    - job: Docker_Build
      displayName: "Docker Build and Push"
      steps:
      - checkout: self

      - bash: |
          sed -i "s|</configuration>|<packageSourceCredentials><vh-packages><add key=\"Username\" value=\"PAT\" /><add key=\"ClearTextPassword\" value=\"$(System.AccessToken)\" /></vh-packages></packageSourceCredentials></configuration>|" nuget.sds.config
        displayName: Add NuGet Feed Authentication
        workingDirectory: VideoApi
    
      - template: templates\Containerisation\docker\docker-compose.yaml@azTemplates
        parameters:
          azureSubscription: ${{ variables.acrSubscription }}
          acrName: ${{ variables.acrName }}
          repositoryName:  ${{ variables.repositoryName }}
        
      - template: templates\Containerisation\docker\docker-push-azure.yaml@azTemplates
        parameters:
          azureSubscription: ${{ variables.acrSubscription }}
          acrName: ${{ variables.acrName }}
          repositoryName:  ${{ variables.repositoryName }}
          imageName: "${{ variables.imageName }}"
          imageTags:
            - 'latest'
            - '${{ variables.releaseTagName }}'

  #####################################################
  # Deploy Nuget Packages. #########################
  - stage: Push_Nuget
    dependsOn: Approve_Helm_Release
    displayName: Deploy Nuget Packages
    variables:
    - template: variables/demo.yaml
    - template: variables/shared.yaml
      parameters:
        env: ${{ variables.env }}
    jobs: 
    - job: Publish_Nuget
      displayName: Publish NuGet Packages
      steps:
      - template: templates\dotnet\push-nuget-packages.yml@azTemplates
        parameters:
          vstsFeed: "${{ variables.nuget_org_name }}/${{ variables.nuget_feed_name }}"

  #########################################
  # Push Helm Charts to Repo. #############
  - stage: Helm
    displayName: Push Helm Charts
    dependsOn: Docker_Build_Push
    variables:
    - template: variables/production.yaml
    - template: variables/shared.yaml
    - group: vh-github-app-credentials
    jobs:
    - job: Helm
      displayName: "Helm Push"
      steps:
      - checkout: self

      - template: templates\Github\get-app-token.yaml@azTemplates
        parameters:
          privateKeyFileName: ${{ variables.gh_app_private_key_file_name }}
          appId: $(gh_app_app_id)

      - template: templates\Github\push-to-helm-chart-repo.yaml@azTemplates
        parameters:
          chartName: ${{ variables.chartName }}
          chartPath: ${{ variables.chartPath }}
          githubToken: $(githubappinstall.token)
          githubUsername: $(gh_app_name)
          githubEmail: "$(gh_app_app_id)+$(gh_app_name)[bot]@users.noreply.github.com"
          subDirectory: ${{ variables.subDirectory }}
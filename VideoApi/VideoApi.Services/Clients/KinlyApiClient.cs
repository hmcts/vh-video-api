//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.2.1.0 (NJsonSchema v10.1.3.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace VideoApi.Services.Kinly
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.1.0 (NJsonSchema v10.1.3.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial interface IKinlyApiClient
    {
        /// <returns>Hearing created</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Hearing> CreateHearingAsync(CreateHearingParams createHearingParams);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Hearing created</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Hearing> CreateHearingAsync(CreateHearingParams createHearingParams, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="judge">Filter hearings on judge id takes precedence over admin</param>
        /// <param name="admin">Filter hearings on admin id</param>
        /// <returns>List of hearings</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> GetHearingsAsync(int? judge, int? admin);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="judge">Filter hearings on judge id takes precedence over admin</param>
        /// <param name="admin">Filter hearings on admin id</param>
        /// <returns>List of hearings</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> GetHearingsAsync(int? judge, int? admin, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Hearing> GetHearingAsync(string virtual_courtroom_id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Hearing> GetHearingAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>successful operation</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateHearingAsync(string virtual_courtroom_id, UpdateHearingParams updateHearingParams);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>successful operation</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UpdateHearingAsync(string virtual_courtroom_id, UpdateHearingParams updateHearingParams, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Deleted</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteHearingAsync(string virtual_courtroom_id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Deleted</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteHearingAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Start hearing backend processes</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartHearingAsync(string virtual_courtroom_id, StartHearingParams startHearingParams);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Start hearing backend processes</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartHearingAsync(string virtual_courtroom_id, StartHearingParams startHearingParams, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Pause hearing backend processes</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PauseHearingAsync(string virtual_courtroom_id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Pause hearing backend processes</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PauseHearingAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>End hearing backend processes</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EndHearingAsync(string virtual_courtroom_id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>End hearing backend processes</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EndHearingAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Requested technical assistance</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TechnicalAssistanceAsync(string virtual_courtroom_id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Requested technical assistance</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TechnicalAssistanceAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Participant transferred</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TransferParticipantAsync(string virtual_courtroom_id, TransferParticipantParams transferParticipantParams);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Participant transferred</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task TransferParticipantAsync(string virtual_courtroom_id, TransferParticipantParams transferParticipantParams, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Participant transferred</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateConsultationRoomResponse> CreateConsultationRoomAsync(string virtual_courtroom_id, CreateConsultationRoomParams createConsultationRoomParams);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Participant transferred</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateConsultationRoomResponse> CreateConsultationRoomAsync(string virtual_courtroom_id, CreateConsultationRoomParams createConsultationRoomParams, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>New participant room</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BookedParticipantRoomResponse> CreateParticipantRoomAsync(string virtual_courtroom_id, CreateParticipantRoomParams createParticipantRoomParams);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>New participant room</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BookedParticipantRoomResponse> CreateParticipantRoomAsync(string virtual_courtroom_id, CreateParticipantRoomParams createParticipantRoomParams, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>All participant rooms</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListParticipantRoomResponse> GetParticipantRoomsAsync(string virtual_courtroom_id);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>All participant rooms</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ListParticipantRoomResponse> GetParticipantRoomsAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken);
    
        /// <returns>Health Check</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthCheckResponse> HealthCheckAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Health Check</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HealthCheckResponse> HealthCheckAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.1.0 (NJsonSchema v10.1.3.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class KinlyApiClient : IKinlyApiClient
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public KinlyApiClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl; 
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
    
        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <returns>Hearing created</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Hearing> CreateHearingAsync(CreateHearingParams createHearingParams)
        {
            return CreateHearingAsync(createHearingParams, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Hearing created</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Hearing> CreateHearingAsync(CreateHearingParams createHearingParams, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createHearingParams, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Hearing>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KinlyApiException("Invalid format", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KinlyApiException("Meeting room already exists", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Hearing);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="judge">Filter hearings on judge id takes precedence over admin</param>
        /// <param name="admin">Filter hearings on admin id</param>
        /// <returns>List of hearings</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response> GetHearingsAsync(int? judge, int? admin)
        {
            return GetHearingsAsync(judge, admin, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="judge">Filter hearings on judge id takes precedence over admin</param>
        /// <param name="admin">Filter hearings on admin id</param>
        /// <returns>List of hearings</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response> GetHearingsAsync(int? judge, int? admin, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing?");
            if (judge != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("judge") + "=").Append(System.Uri.EscapeDataString(ConvertToString(judge, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (admin != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("admin") + "=").Append(System.Uri.EscapeDataString(ConvertToString(admin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Hearing> GetHearingAsync(string virtual_courtroom_id)
        {
            return GetHearingAsync(virtual_courtroom_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Hearing> GetHearingAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken)
        {
            if (virtual_courtroom_id == null)
                throw new System.ArgumentNullException("virtual_courtroom_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing/{virtual_courtroom_id}");
            urlBuilder_.Replace("{virtual_courtroom_id}", System.Uri.EscapeDataString(ConvertToString(virtual_courtroom_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Hearing>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KinlyApiException("Hearing does not exist", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Hearing);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>successful operation</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task UpdateHearingAsync(string virtual_courtroom_id, UpdateHearingParams updateHearingParams)
        {
            return UpdateHearingAsync(virtual_courtroom_id, updateHearingParams, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>successful operation</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task UpdateHearingAsync(string virtual_courtroom_id, UpdateHearingParams updateHearingParams, System.Threading.CancellationToken cancellationToken)
        {
            if (virtual_courtroom_id == null)
                throw new System.ArgumentNullException("virtual_courtroom_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing/{virtual_courtroom_id}");
            urlBuilder_.Replace("{virtual_courtroom_id}", System.Uri.EscapeDataString(ConvertToString(virtual_courtroom_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(updateHearingParams, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "404") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KinlyApiException("Hearing does not exist - Invalid virtual_courtroom_id. (When virtual_courtroom_id does not exist or the hearing is already closed.)", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Deleted</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteHearingAsync(string virtual_courtroom_id)
        {
            return DeleteHearingAsync(virtual_courtroom_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Deleted</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeleteHearingAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken)
        {
            if (virtual_courtroom_id == null)
                throw new System.ArgumentNullException("virtual_courtroom_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing/{virtual_courtroom_id}");
            urlBuilder_.Replace("{virtual_courtroom_id}", System.Uri.EscapeDataString(ConvertToString(virtual_courtroom_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Start hearing backend processes</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task StartHearingAsync(string virtual_courtroom_id, StartHearingParams startHearingParams)
        {
            return StartHearingAsync(virtual_courtroom_id, startHearingParams, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Start hearing backend processes</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task StartHearingAsync(string virtual_courtroom_id, StartHearingParams startHearingParams, System.Threading.CancellationToken cancellationToken)
        {
            if (virtual_courtroom_id == null)
                throw new System.ArgumentNullException("virtual_courtroom_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing/{virtual_courtroom_id}/start");
            urlBuilder_.Replace("{virtual_courtroom_id}", System.Uri.EscapeDataString(ConvertToString(virtual_courtroom_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(startHearingParams, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "202") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KinlyApiException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ == "409") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KinlyApiException("The hearing is started/starting.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Pause hearing backend processes</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PauseHearingAsync(string virtual_courtroom_id)
        {
            return PauseHearingAsync(virtual_courtroom_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Pause hearing backend processes</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PauseHearingAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken)
        {
            if (virtual_courtroom_id == null)
                throw new System.ArgumentNullException("virtual_courtroom_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing/{virtual_courtroom_id}/pause");
            urlBuilder_.Replace("{virtual_courtroom_id}", System.Uri.EscapeDataString(ConvertToString(virtual_courtroom_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "202") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KinlyApiException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>End hearing backend processes</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task EndHearingAsync(string virtual_courtroom_id)
        {
            return EndHearingAsync(virtual_courtroom_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>End hearing backend processes</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task EndHearingAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken)
        {
            if (virtual_courtroom_id == null)
                throw new System.ArgumentNullException("virtual_courtroom_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing/{virtual_courtroom_id}/end");
            urlBuilder_.Replace("{virtual_courtroom_id}", System.Uri.EscapeDataString(ConvertToString(virtual_courtroom_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "202") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KinlyApiException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Requested technical assistance</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task TechnicalAssistanceAsync(string virtual_courtroom_id)
        {
            return TechnicalAssistanceAsync(virtual_courtroom_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Requested technical assistance</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task TechnicalAssistanceAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken)
        {
            if (virtual_courtroom_id == null)
                throw new System.ArgumentNullException("virtual_courtroom_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing/{virtual_courtroom_id}/assistance");
            urlBuilder_.Replace("{virtual_courtroom_id}", System.Uri.EscapeDataString(ConvertToString(virtual_courtroom_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "202") 
                        {
                            return;
                        }
                        else
                        if (status_ == "401") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KinlyApiException("Unauthorized", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Participant transferred</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task TransferParticipantAsync(string virtual_courtroom_id, TransferParticipantParams transferParticipantParams)
        {
            return TransferParticipantAsync(virtual_courtroom_id, transferParticipantParams, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Participant transferred</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task TransferParticipantAsync(string virtual_courtroom_id, TransferParticipantParams transferParticipantParams, System.Threading.CancellationToken cancellationToken)
        {
            if (virtual_courtroom_id == null)
                throw new System.ArgumentNullException("virtual_courtroom_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing/{virtual_courtroom_id}/transfer");
            urlBuilder_.Replace("{virtual_courtroom_id}", System.Uri.EscapeDataString(ConvertToString(virtual_courtroom_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(transferParticipantParams, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "202") 
                        {
                            return;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KinlyApiException("Data is malformed", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Participant transferred</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CreateConsultationRoomResponse> CreateConsultationRoomAsync(string virtual_courtroom_id, CreateConsultationRoomParams createConsultationRoomParams)
        {
            return CreateConsultationRoomAsync(virtual_courtroom_id, createConsultationRoomParams, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Participant transferred</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreateConsultationRoomResponse> CreateConsultationRoomAsync(string virtual_courtroom_id, CreateConsultationRoomParams createConsultationRoomParams, System.Threading.CancellationToken cancellationToken)
        {
            if (virtual_courtroom_id == null)
                throw new System.ArgumentNullException("virtual_courtroom_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing/{virtual_courtroom_id}/consultation-room");
            urlBuilder_.Replace("{virtual_courtroom_id}", System.Uri.EscapeDataString(ConvertToString(virtual_courtroom_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createConsultationRoomParams, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateConsultationRoomResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KinlyApiException("Data is malformed", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CreateConsultationRoomResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>New participant room</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BookedParticipantRoomResponse> CreateParticipantRoomAsync(string virtual_courtroom_id, CreateParticipantRoomParams createParticipantRoomParams)
        {
            return CreateParticipantRoomAsync(virtual_courtroom_id, createParticipantRoomParams, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>New participant room</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BookedParticipantRoomResponse> CreateParticipantRoomAsync(string virtual_courtroom_id, CreateParticipantRoomParams createParticipantRoomParams, System.Threading.CancellationToken cancellationToken)
        {
            if (virtual_courtroom_id == null)
                throw new System.ArgumentNullException("virtual_courtroom_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing/{virtual_courtroom_id}/participant-room");
            urlBuilder_.Replace("{virtual_courtroom_id}", System.Uri.EscapeDataString(ConvertToString(virtual_courtroom_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createParticipantRoomParams, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BookedParticipantRoomResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KinlyApiException("Data is malformed", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BookedParticipantRoomResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>All participant rooms</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ListParticipantRoomResponse> GetParticipantRoomsAsync(string virtual_courtroom_id)
        {
            return GetParticipantRoomsAsync(virtual_courtroom_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>All participant rooms</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ListParticipantRoomResponse> GetParticipantRoomsAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken)
        {
            if (virtual_courtroom_id == null)
                throw new System.ArgumentNullException("virtual_courtroom_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing/{virtual_courtroom_id}/participant-room");
            urlBuilder_.Replace("{virtual_courtroom_id}", System.Uri.EscapeDataString(ConvertToString(virtual_courtroom_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ListParticipantRoomResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new KinlyApiException("Data is malformed", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ListParticipantRoomResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <returns>Health Check</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HealthCheckResponse> HealthCheckAsync()
        {
            return HealthCheckAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Health Check</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<HealthCheckResponse> HealthCheckAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/health");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<HealthCheckResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(HealthCheckResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new KinlyApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new KinlyApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CreateHearingParams 
    {
        /// <summary>Unique hearing ID</summary>
        [Newtonsoft.Json.JsonProperty("virtual_courtroom_id", Required = Newtonsoft.Json.Required.Always)]
        public string Virtual_courtroom_id { get; set; }
    
        /// <summary>Callback uri</summary>
        [Newtonsoft.Json.JsonProperty("callback_uri", Required = Newtonsoft.Json.Required.Always)]
        public string Callback_uri { get; set; }
    
        /// <summary>Should record conference</summary>
        [Newtonsoft.Json.JsonProperty("recording_enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Recording_enabled { get; set; }
    
        /// <summary>Recording url</summary>
        [Newtonsoft.Json.JsonProperty("recording_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Recording_url { get; set; }
    
        /// <summary>Should stream conference</summary>
        [Newtonsoft.Json.JsonProperty("streaming_enabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Streaming_enabled { get; set; }
    
        /// <summary>Streaming url</summary>
        [Newtonsoft.Json.JsonProperty("streaming_url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Streaming_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("jvs_endpoint", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Endpoint> Jvs_endpoint { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CreateHearingParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateHearingParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class UpdateHearingParams 
    {
        /// <summary>Should record conference</summary>
        [Newtonsoft.Json.JsonProperty("recording_enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Recording_enabled { get; set; }
    
        [Newtonsoft.Json.JsonProperty("jvs_endpoint", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.List<Endpoint> Jvs_endpoint { get; set; } = new System.Collections.Generic.List<Endpoint>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static UpdateHearingParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateHearingParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StartHearingParams 
    {
        [Newtonsoft.Json.JsonProperty("hearing_layout", Required = Newtonsoft.Json.Required.Always)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Layout Hearing_layout { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static StartHearingParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<StartHearingParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Hearing 
    {
        /// <summary>The conference's UUID</summary>
        [Newtonsoft.Json.JsonProperty("virtual_courtroom_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? Virtual_courtroom_id { get; set; }
    
        /// <summary>The public switched telephone network pin</summary>
        [Newtonsoft.Json.JsonProperty("telephone_conference_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Telephone_conference_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("uris", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Uris Uris { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Hearing FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Hearing>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Uris 
    {
        /// <summary>URL of the pexip node</summary>
        [Newtonsoft.Json.JsonProperty("pexip_node", Required = Newtonsoft.Json.Required.Always)]
        public string Pexip_node { get; set; }
    
        /// <summary>prepackaged URL for admin iframe</summary>
        [Newtonsoft.Json.JsonProperty("admin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Admin { get; set; }
    
        /// <summary>Webrtc URI for participants.</summary>
        [Newtonsoft.Json.JsonProperty("participant", Required = Newtonsoft.Json.Required.Always)]
        public string Participant { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Uris FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Uris>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Testcall 
    {
        /// <summary>Test call score</summary>
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Always)]
        public int Score { get; set; }
    
        /// <summary>Result derived from score</summary>
        [Newtonsoft.Json.JsonProperty("passed", Required = Newtonsoft.Json.Required.Always)]
        public bool Passed { get; set; }
    
        /// <summary>User id associated with the score</summary>
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.Always)]
        public string User_id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Testcall FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Testcall>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class TransferParticipantParams 
    {
        /// <summary>Unique participant ID</summary>
        [Newtonsoft.Json.JsonProperty("part_id", Required = Newtonsoft.Json.Required.Always)]
        public string Part_id { get; set; }
    
        /// <summary>Room label transfering participant from</summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        public string To { get; set; }
    
        /// <summary>Room label transfering participant to</summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        public string From { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static TransferParticipantParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransferParticipantParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CreateConsultationRoomParams 
    {
        /// <summary>Room label prefix</summary>
        [Newtonsoft.Json.JsonProperty("room_label_prefix", Required = Newtonsoft.Json.Required.Always)]
        public string Room_label_prefix { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CreateConsultationRoomParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateConsultationRoomParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Endpoint 
    {
        /// <summary>The address or SIP</summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.Always)]
        public string Address { get; set; }
    
        /// <summary>The display name</summary>
        [Newtonsoft.Json.JsonProperty("display_name", Required = Newtonsoft.Json.Required.Always)]
        public string Display_name { get; set; }
    
        /// <summary>The PIN</summary>
        [Newtonsoft.Json.JsonProperty("pin", Required = Newtonsoft.Json.Required.Always)]
        public string Pin { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Endpoint FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Endpoint>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Layout
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AUTOMATIC")]
        AUTOMATIC = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE")]
        SINGLE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FOUR_EQUAL")]
        FOUR_EQUAL = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ONE_PLUS_SEVEN")]
        ONE_PLUS_SEVEN = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TWO_PLUS_TWENTYONE")]
        TWO_PLUS_TWENTYONE = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HealthCheckResponse 
    {
        /// <summary>The platform health</summary>
        [Newtonsoft.Json.JsonProperty("health_status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlatformHealth? Health_status { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static HealthCheckResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HealthCheckResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PlatformHealth
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HEALTHY")]
        HEALTHY = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNHEALTHY")]
        UNHEALTHY = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CreateConsultationRoomResponse 
    {
        [Newtonsoft.Json.JsonProperty("room_label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Room_label { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CreateConsultationRoomResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateConsultationRoomResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class CreateParticipantRoomParams 
    {
        [Newtonsoft.Json.JsonProperty("room_label_prefix", Required = Newtonsoft.Json.Required.Always)]
        public string Room_label_prefix { get; set; }
    
        [Newtonsoft.Json.JsonProperty("audio_recording_url", Required = Newtonsoft.Json.Required.Always)]
        public string Audio_recording_url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("participant_type", Required = Newtonsoft.Json.Required.Always)]
        public string Participant_type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("room_type", Required = Newtonsoft.Json.Required.Always)]
        public string Room_type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tile_number", Required = Newtonsoft.Json.Required.Always)]
        public string Tile_number { get; set; }
    
        [Newtonsoft.Json.JsonProperty("participant_room_id", Required = Newtonsoft.Json.Required.Always)]
        public string Participant_room_id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("display_name", Required = Newtonsoft.Json.Required.Always)]
        public string Display_name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CreateParticipantRoomParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateParticipantRoomParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class BookedParticipantRoomResponse 
    {
        [Newtonsoft.Json.JsonProperty("uris", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Uris Uris { get; set; }
    
        [Newtonsoft.Json.JsonProperty("display_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Display_name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static BookedParticipantRoomResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BookedParticipantRoomResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ListParticipantRoomResponse 
    {
        [Newtonsoft.Json.JsonProperty("bookedParticipantRooms", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BookedParticipantRoomResponse> BookedParticipantRooms { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static ListParticipantRoomResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListParticipantRoomResponse>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.3.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response 
    {
        [Newtonsoft.Json.JsonProperty("hearings", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.List<Hearing> Hearings { get; set; } = new System.Collections.Generic.List<Hearing>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Response FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(data);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.1.0 (NJsonSchema v10.1.3.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class KinlyApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public KinlyApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.2.1.0 (NJsonSchema v10.1.3.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class KinlyApiException<TResult> : KinlyApiException
    {
        public TResult Result { get; private set; }

        public KinlyApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace VideoApi.Services.Kinly
{
    #pragma warning disable

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IKinlyApiClient
    {
        /// <returns>Hearing created</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Hearing> CreateHearingAsync(CreateHearingParams createHearingParams);
    
        /// <returns>Hearing created</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        Hearing CreateHearing(CreateHearingParams createHearingParams);
    
        /// <returns>Hearing created</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Hearing> CreateHearingAsync(CreateHearingParams createHearingParams, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="judge">Filter hearings on judge id takes precedence over admin</param>
        /// <param name="admin">Filter hearings on admin id</param>
        /// <returns>List of hearings</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Response> GetHearingsAsync(int? judge, int? admin);
    
        /// <param name="judge">Filter hearings on judge id takes precedence over admin</param>
        /// <param name="admin">Filter hearings on admin id</param>
        /// <returns>List of hearings</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        Response GetHearings(int? judge, int? admin);
    
        /// <param name="judge">Filter hearings on judge id takes precedence over admin</param>
        /// <param name="admin">Filter hearings on admin id</param>
        /// <returns>List of hearings</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Response> GetHearingsAsync(int? judge, int? admin, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Hearing> GetHearingAsync(string virtual_courtroom_id);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        Hearing GetHearing(string virtual_courtroom_id);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Hearing> GetHearingAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Deleted</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteHearingAsync(string virtual_courtroom_id);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Deleted</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        void DeleteHearing(string virtual_courtroom_id);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Deleted</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task DeleteHearingAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Start hearing backend processess</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task StartHearingAsync(string virtual_courtroom_id);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Start hearing backend processess</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        void StartHearing(string virtual_courtroom_id);
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Start hearing backend processess</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task StartHearingAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken);
    
        /// <param name="user_id">User ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Testcall> GetTestCallAsync(string user_id);
    
        /// <param name="user_id">User ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        Testcall GetTestCall(string user_id);
    
        /// <param name="user_id">User ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Testcall> GetTestCallAsync(string user_id, System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class KinlyApiClient : IKinlyApiClient
    {
        private string _baseUrl = "https://dev.hearings.hmcts.net/virtual-court/api/v1";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public KinlyApiClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        public Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <returns>Hearing created</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Hearing> CreateHearingAsync(CreateHearingParams createHearingParams)
        {
            return CreateHearingAsync(createHearingParams, System.Threading.CancellationToken.None);
        }
    
        /// <returns>Hearing created</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public Hearing CreateHearing(CreateHearingParams createHearingParams)
        {
            return System.Threading.Tasks.Task.Run(async () => await CreateHearingAsync(createHearingParams, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <returns>Hearing created</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Hearing> CreateHearingAsync(CreateHearingParams createHearingParams, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createHearingParams, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Hearing); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Hearing>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new KinlyApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "409") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("Meeting room already exists", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Hearing);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="judge">Filter hearings on judge id takes precedence over admin</param>
        /// <param name="admin">Filter hearings on admin id</param>
        /// <returns>List of hearings</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response> GetHearingsAsync(int? judge, int? admin)
        {
            return GetHearingsAsync(judge, admin, System.Threading.CancellationToken.None);
        }
    
        /// <param name="judge">Filter hearings on judge id takes precedence over admin</param>
        /// <param name="admin">Filter hearings on admin id</param>
        /// <returns>List of hearings</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public Response GetHearings(int? judge, int? admin)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetHearingsAsync(judge, admin, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="judge">Filter hearings on judge id takes precedence over admin</param>
        /// <param name="admin">Filter hearings on admin id</param>
        /// <returns>List of hearings</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Response> GetHearingsAsync(int? judge, int? admin, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing?");
            if (judge != null) 
            {
                urlBuilder_.Append("judge=").Append(System.Uri.EscapeDataString(ConvertToString(judge, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (admin != null) 
            {
                urlBuilder_.Append("admin=").Append(System.Uri.EscapeDataString(ConvertToString(admin, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Response); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new KinlyApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Hearing> GetHearingAsync(string virtual_courtroom_id)
        {
            return GetHearingAsync(virtual_courtroom_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public Hearing GetHearing(string virtual_courtroom_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetHearingAsync(virtual_courtroom_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Hearing> GetHearingAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken)
        {
            if (virtual_courtroom_id == null)
                throw new System.ArgumentNullException("virtual_courtroom_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing/{virtual_courtroom_id}");
            urlBuilder_.Replace("{virtual_courtroom_id}", System.Uri.EscapeDataString(ConvertToString(virtual_courtroom_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Hearing); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Hearing>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new KinlyApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "404") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("Hearing does not exist", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Hearing);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Deleted</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeleteHearingAsync(string virtual_courtroom_id)
        {
            return DeleteHearingAsync(virtual_courtroom_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Deleted</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public void DeleteHearing(string virtual_courtroom_id)
        {
            System.Threading.Tasks.Task.Run(async () => await DeleteHearingAsync(virtual_courtroom_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Deleted</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task DeleteHearingAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken)
        {
            if (virtual_courtroom_id == null)
                throw new System.ArgumentNullException("virtual_courtroom_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing/{virtual_courtroom_id}");
            urlBuilder_.Replace("{virtual_courtroom_id}", System.Uri.EscapeDataString(ConvertToString(virtual_courtroom_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "204") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Start hearing backend processess</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task StartHearingAsync(string virtual_courtroom_id)
        {
            return StartHearingAsync(virtual_courtroom_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Start hearing backend processess</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public void StartHearing(string virtual_courtroom_id)
        {
            System.Threading.Tasks.Task.Run(async () => await StartHearingAsync(virtual_courtroom_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="virtual_courtroom_id">Hearing ID</param>
        /// <returns>Start hearing backend processess</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task StartHearingAsync(string virtual_courtroom_id, System.Threading.CancellationToken cancellationToken)
        {
            if (virtual_courtroom_id == null)
                throw new System.ArgumentNullException("virtual_courtroom_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/hearing/{virtual_courtroom_id}/start");
            urlBuilder_.Replace("{virtual_courtroom_id}", System.Uri.EscapeDataString(ConvertToString(virtual_courtroom_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "202") 
                        {
                            return;
                        }
                        else
                        if (status_ == "409") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The hearing is started/starting.", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="user_id">User ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Testcall> GetTestCallAsync(string user_id)
        {
            return GetTestCallAsync(user_id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="user_id">User ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        public Testcall GetTestCall(string user_id)
        {
            return System.Threading.Tasks.Task.Run(async () => await GetTestCallAsync(user_id, System.Threading.CancellationToken.None)).GetAwaiter().GetResult();
        }
    
        /// <param name="user_id">User ID</param>
        /// <returns>Hearing object</returns>
        /// <exception cref="KinlyApiException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Testcall> GetTestCallAsync(string user_id, System.Threading.CancellationToken cancellationToken)
        {
            if (user_id == null)
                throw new System.ArgumentNullException("user_id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/testcall/{user_id}");
            urlBuilder_.Replace("{user_id}", System.Uri.EscapeDataString(ConvertToString(user_id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Testcall); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Testcall>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new KinlyApiException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new KinlyApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Testcall);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateHearingParams 
    {
        /// <summary>Unique hearing ID</summary>
        [Newtonsoft.Json.JsonProperty("virtual_courtroom_id", Required = Newtonsoft.Json.Required.Always)]
        public string Virtual_courtroom_id { get; set; }
    
        /// <summary>Callback uri</summary>
        [Newtonsoft.Json.JsonProperty("callback_uri", Required = Newtonsoft.Json.Required.Always)]
        public string Callback_uri { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static CreateHearingParams FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateHearingParams>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Hearing 
    {
        [Newtonsoft.Json.JsonProperty("uris", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Uris Uris { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Hearing FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Hearing>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Uris 
    {
        /// <summary>URL of the pexip node</summary>
        [Newtonsoft.Json.JsonProperty("pexip_node", Required = Newtonsoft.Json.Required.Always)]
        public string Pexip_node { get; set; }
    
        /// <summary>prepackaged URL for judge iframe</summary>
        [Newtonsoft.Json.JsonProperty("judge", Required = Newtonsoft.Json.Required.Always)]
        public string Judge { get; set; }
    
        /// <summary>prepackaged URL for admin iframe</summary>
        [Newtonsoft.Json.JsonProperty("admin", Required = Newtonsoft.Json.Required.Always)]
        public string Admin { get; set; }
    
        /// <summary>Webrtc URI for participants.</summary>
        [Newtonsoft.Json.JsonProperty("participant", Required = Newtonsoft.Json.Required.Always)]
        public string Participant { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Uris FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Uris>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Testcall 
    {
        /// <summary>Test call score</summary>
        [Newtonsoft.Json.JsonProperty("score", Required = Newtonsoft.Json.Required.Always)]
        public int Score { get; set; }
    
        /// <summary>Result derived from score</summary>
        [Newtonsoft.Json.JsonProperty("passed", Required = Newtonsoft.Json.Required.Always)]
        public bool Passed { get; set; }
    
        /// <summary>User id associated with the score</summary>
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.Always)]
        public string User_id { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Testcall FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Testcall>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.14.1.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response 
    {
        [Newtonsoft.Json.JsonProperty("hearings", Required = Newtonsoft.Json.Required.Always)]
        public System.Collections.Generic.List<Hearing> Hearings { get; set; } = new System.Collections.Generic.List<Hearing>();
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
    
        public static Response FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Response>(data);
        }
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class KinlyApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public KinlyApiException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class KinlyApiException<TResult> : KinlyApiException
    {
        public TResult Result { get; private set; }

        public KinlyApiException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

    #pragma warning restore
}
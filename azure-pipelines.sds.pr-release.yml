name: $(Date:yyyyMMddHHmm)-$(Rev:r)

resources:
  repositories:
    - repository: azTemplates
      type: github
      name: hmcts/azure-devops-templates
      ref: master
      endpoint: hmcts

trigger: none

pr:
  - master

pool:
  vmImage: ubuntu-22.04

stages:
  ####################################################
  # CI Build Checks. #################################
  - stage: CI_Build
    displayName: CI Build
    variables:
      - template: variables/shared.yaml
    jobs:
      - job: CI_Helm
        displayName: "Helm CI"
        steps:
          - checkout: self

          - template: templates\Containerisation\helm\helm-lint.yaml@azTemplates
            parameters:
              chartPath: ${{ variables.chartPath }}
              chartValuesPath: ${{ variables.chartPath }}

      - job: UnitAndIntegrationTests
        displayName: "Unit and Integration Tests"
        steps:
          - checkout: self

          - template: templates/dotnet/build-test-analyse.yml@azTemplates
            parameters:
              dotnetVersion: ${{ variables.dotnetVersion }}
              nugetConfigPath: nuget.config
              appName: ${{ variables.appName }}
              dockerComposeTestFile: docker-compose.tests.yml
              sonarExtraProperties: |
                sonar.cs.opencover.reportsPaths=$(System.DefaultWorkingDirectory)/coverage.opencover.xml
                sonar.exclusions=**/Program.cs, **/Startup.cs, **/Testing.Common/**/*, **/VideoApi/Swagger/**/*, VideoApi/VideoApi.DAL/Migrations/*
                sonar.coverage.exclusions=**/VideoApi/Swagger/**/*, **/Program.cs, **/Startup.cs, **/Testing.Common/**/*, **/VideoApi.Common/**/*, **/VideoApi.IntegrationTests/**/*, **/VideoApi.UnitTests/**/*, **/VideoApi/Extensions/*

  ####################################################
  # Pre Release Tasks. ###############################
  - stage: Pre_Release_Tasks
    displayName: Pre-Release Tasks
    variables:
      - template: variables/shared.yaml
    jobs:
      - job: Generate_Entity_Framework_Script
        displayName: "Generate Entity Framework Script"
        steps:
          - template: templates/Database/EntityFramework/generate-script.yaml@azTemplates
            parameters:
              efVersion: ${{ variables.efDotnetToolVersion }}
              outputPath: $(Build.StagingDirectory)
              contextName: ${{ variables.efContextName }}
              workingPath: $(System.DefaultWorkingDirectory)/${{ variables.appName }}/${{ variables.appName }}
              migrationsPath: ${{ variables.appName }}/${{ variables.appName }}.DAL/Migrations
              projectName: ${{ variables.efProjectName }}
    
      - job: Generate_RefData_Entity_Framework_Script
        displayName: "Generate RefData Entity Framework Script"
        steps:
          - template: templates/Database/EntityFramework/generate-script.yaml@azTemplates
            parameters:
              efVersion: ${{ variables.efDotnetToolVersion }}
              outputPath: $(Build.StagingDirectory)
              contextName: ${{ variables.efContextNameRefData }}
              workingPath: $(System.DefaultWorkingDirectory)/RefData
              migrationsPath: RefData/Migrations
              projectName: ${{ variables.efProjectNameRefData }}

      - job: package_nuget
        displayName: 'Package NuGet Packages'
        steps:
          - template: templates\dotnet\package-nuget-packages.yml@azTemplates
            parameters:
              nugetProjectPath: "${{ variables.appName }}/${{ variables.nuget_package_name }}"
              vstsFeed: "${{ variables.nuget_org_name }}/${{ variables.nuget_feed_name }}"
              gitVersionConfigPath: ${{ variables.git_version_config_path }}

      - job: PublishAcceptanceTests
        dependsOn: package_nuget
        displayName: Publish Acceptance Tests
        variables:
          projectPath: "${{ variables.appName }}/${{ variables.appName }}"
        steps:
          - template: templates\dotnet\publish-acceptance-tests.yml@azTemplates
            parameters:
              netVersion: ${{ variables.dotnetVersion }}
              vstsFeedId: "${{ variables.nuget_org_name }}/${{ variables.nuget_feed_name }}"
              coreProjectPath: $(projectPath)
  #####################################################
  # Build Docker Image. ###############################
  - stage: Dock
    displayName: Docker Build & Push Image
    variables:
      - group: aks-cluster-info
      - template: variables/dev.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
      - group: vh-github-app-credentials
    jobs:
      - job: Dock
        displayName: "Build and Push Image ${{ variables.git_repo_name }}"
        steps:
          - checkout: self

          - template: templates\Github\get-app-token.yaml@azTemplates
            parameters:
              privateKeyFileName: ${{ variables.gh_app_private_key_file_name }}
              appId: $(gh_app_app_id)

          - template: templates\Github\bump-chart-versions.yaml@azTemplates
            parameters:
              chartName: ${{ variables.chartName }}
              chartPath: $(Build.SourcesDirectory)
              chartBranch: $(System.PullRequest.SourceBranch)
              githubToken: $(githubappinstall.token)
              githubUsername: $(gh_app_name)
              githubEmail: "$(gh_app_app_id)+$(gh_app_name)[bot]@users.noreply.github.com"

          - bash: |
              sed -i "s|</configuration>|<packageSourceCredentials><vh-packages><add key=\"Username\" value=\"PAT\" /><add key=\"ClearTextPassword\" value=\"$(System.AccessToken)\" /></vh-packages></packageSourceCredentials></configuration>|" nuget.config
            displayName: Add NuGet Feed Authentication
            workingDirectory: ${{ variables.appName }}

          - template: templates\Containerisation\docker\docker-compose.yaml@azTemplates
            parameters:
              azureSubscription: ${{ variables.acrSubscription }}
              acrName: ${{ variables.acrName }}
              repositoryName: ${{ variables.repositoryName }}

          - template: templates\Containerisation\docker\docker-push-azure.yaml@azTemplates
            parameters:
              azureSubscription: ${{ variables.acrSubscription }}
              acrName: ${{ variables.acrName }}
              repositoryName: ${{ variables.repositoryName }}
              imageName: "${{ replace(variables.git_repo_name, '-', '') }}"
              imageTags:
                - "${{ variables.prTagName }}"

  #####################################################
  # Run Entity Framework Dev. #########################
  - stage: Run_Entity_Framework_Dev
    displayName: Run Entity Framework Dev
    dependsOn: Dock
    variables:
      - template: variables/dev.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
    jobs:
      - job: Run_Entity_Framework_Dev
        pool:
          vmImage: "windows-latest" # This Job Must be Run on Windows
        displayName: Run Entity Framework Dev
        steps:
          - download: current
            displayName: Download Sql Artifact

          - template: templates/Database/EntityFramework/run-entity-framework.yaml@azTemplates
            parameters:
              sqlServerResourceGroup: ${{ variables.vhResourceGroup }}
              sqlServerName: ${{ variables.vhSQLServerName }}
              databaseName: ${{ variables.videoApiDbName }}
              azureSubscription: ${{ variables.subscriptionName }}
              sqlScriptLocation: "$(Pipeline.Workspace)/${{ variables.efContextName }}-$(Build.BuildId)/${{ variables.efContextName }}.sql"
              kvfirewallRequired: false
              kvName: ${{ variables.vhKeyVault }}
              kvSqlPasswordSecret: ${{ variables.vhSqlPasswordSecret }}
              kvSqlUsernameSecret: ${{ variables.vhSqlUsernameSecret }}
  
      - job: Run_Entity_Framework_RefData_Dev
        pool:
          vmImage: "windows-latest" # This Job Must be Run on Windows
        displayName: Run Entity Framework Ref Data Dev
        dependsOn: Run_Entity_Framework_Dev
        steps:
          - download: current
            displayName: Download Sql Artifact

          - template: templates/Database/EntityFramework/run-entity-framework.yaml@azTemplates
            parameters:
              sqlServerResourceGroup: ${{ variables.vhResourceGroup }}
              sqlServerName: ${{ variables.vhSQLServerName }}
              databaseName: ${{ variables.videoApiDbName }}
              azureSubscription: ${{ variables.subscriptionName }}
              sqlScriptLocation: "$(Pipeline.Workspace)/${{ variables.efContextNameRefData }}-$(Build.BuildId)/${{ variables.efContextNameRefData }}.sql"
              kvfirewallRequired: false
              kvName: ${{ variables.vhKeyVault }}
              kvSqlPasswordSecret: ${{ variables.vhSqlPasswordSecret }}
              kvSqlUsernameSecret: ${{ variables.vhSqlUsernameSecret }}

  #####################################################
  # Deploy Helm Chart to Dev. #########################
  - stage: Install
    dependsOn: Run_Entity_Framework_Dev
    displayName: Deploy Helm Chart Dev AKS
    variables:
      - group: vh-github-app-credentials
      - template: variables/dev.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
      - name: dnsRecordName
        value: vh-${{ variables.git_repo_name }}-${{ variables.prTagPrefix }}
    jobs:
      - job: helm_uninstall
        displayName: Uninstall Helm from Dev
        steps:
          - template: templates\Azure\Aks\get-active-cluster.yaml@azTemplates
            parameters:
              subscriptionName: "${{ variables.subscriptionName }}"
              environment: ${{ variables.env }}

          - template: templates/Containerisation/helm/helm-uninstall.yaml@azTemplates
            parameters:
              namespace: "vh"
              releaseName: "${{ variables.chartName }}-${{ variables.prTagPrefix }}"
              azureSubscription: "${{ variables.subscriptionName }}"
              aksResourceGroupName: "$(aksCluster.resourceGroup)"
              aksClusterName: "$(aksCluster.name)"

      - job: aks_push
        displayName: Deploy To Dev AKS
        dependsOn: helm_uninstall
        steps:
          - template: templates\Azure\Aks\get-active-cluster.yaml@azTemplates
            parameters:
              subscriptionName: "${{ variables.subscriptionName }}"
              environment: ${{ variables.env }}
          - template: templates/Containerisation/helm/helm-install.yaml@azTemplates
            parameters:
              privateKeyFileName: ${{ variables.gh_app_private_key_file_name }}
              appId: $(gh_app_app_id)
              envValuesTemplatePath: ${{ variables.envValuesTemplatePath }}
              envValuesPath: ${{ variables.envValuesPath }}
              acrName: ${{ variables.acrName }}
              repositoryName: ${{ variables.repositoryName }}
              prTagName: ${{ variables.prTagName }}
              releaseName: "${{ variables.chartName }}-${{ variables.prTagPrefix }}"
              dnsRecordName: ${{ variables.dnsRecordName }}
              dnsZone: ${{ variables.dnsZone }}
              env: ${{ variables.env }}
              chartName: ${{ variables.chartName }}
              chartPath: ${{ variables.chartPath }}
              subscriptionName: "${{ variables.subscriptionName }}"
              aksResourceGroupName: "$(aksCluster.resourceGroup)"
              aksClusterName: "$(aksCluster.name)"
              dnsSubscriptionName: "${{ variables.dnsZoneSubscription }}"
              dnsResourceGroupName: "${{ variables.dnsZoneResourceGroup }}"

  ##################################################
  # Deploy Nuget Packages. #########################
  - stage: Push_Nuget
    dependsOn: Run_Entity_Framework_Dev
    displayName: Deploy NuGet Packages
    variables:
      - template: variables/dev.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
    jobs:
      - job: Publish_Nuget
        displayName: Publish NuGet Packages
        steps:
          - template: templates\dotnet\push-nuget-packages.yml@azTemplates
            parameters:
              vstsFeed: "${{ variables.nuget_org_name }}/${{ variables.nuget_feed_name }}"

  ##################################################
  # Run Acceptance Tests. ##########################
  - stage: Acceptance_Tests_Dev
    dependsOn: Install
    displayName: Acceptance Tests Dev
    variables:
      - group: vh-video-api
      - template: variables/dev.yaml
      - template: variables/shared.yaml
        parameters:
          env: ${{ variables.env }}
      - name: dnsRecordName
        value: vh-${{ variables.git_repo_name }}-${{ variables.prTagPrefix }}
    jobs:
      - job: AcceptanceTestsDev
        pool: VH Self Hosted
        displayName: Acceptance Tests Dev
        steps:
          - template: templates/dotnet/run-acceptance-tests.yml@azTemplates
            parameters:
              netVersion: ${{ variables.dotnetVersion }}
              environment: ${{ variables.env }}
              azureSubscription: ${{ variables.subscriptionName }}
              acceptanceTestSettings:
                # App Insights
                - name: ApplicationInsights:ConnectionString
                  value: connectionstrings--applicationinsights
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true

                # Azure AD
                - name: AzureAd:ClientId
                  value: azuread--clientid
                  keyVaultName: vh-video-api-${{ variables.env }}
                  secret: true
                - name: AzureAd:ClientSecret
                  value: azuread--clientsecret
                  keyVaultName: vh-video-api-${{ variables.env }}
                  secret: true
                - name: AzureAd:TenantId
                  value: azuread--tenantid
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true

                # Services Configuration
                - name: Services:VideoApiResourceId
                  value: azuread--identifieruri
                  keyVaultName: vh-video-api-${{ variables.env }}
                  secret: true
                - name: Services:CallbackUri
                  value: $(CallbackUri)
                - name: Services:VideoApiUrl
                  value: "https://vh-video-api-pr-$(System.PullRequest.PullRequestNumber).dev.platform.hmcts.net"

                # Wowza Configuration
                - name: WowzaConfiguration:RestApiEndpoints
                  value: wowzaconfiguration--endpoint-https
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true
                - name: WowzaConfiguration:StreamingEndpoint
                  value: wowzaconfiguration--endpoint-https
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true
                - name: WowzaConfiguration:Username
                  value: wowzaconfiguration--username
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true
                - name: WowzaConfiguration:Password
                  value: wowzaconfiguration--restPassword
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true
                - name: WowzaConfiguration:StorageDirectory
                  value: wowzaconfiguration--azure-storage-directory
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true
                - name: WowzaConfiguration:StorageAccountName
                  value: wowzaconfiguration--storage-account
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true
                - name: WowzaConfiguration:StorageAccountKey
                  value: wowzaconfiguration--storageaccountkey
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true
                - name: WowzaConfiguration:StorageContainerName
                  value: wowzaconfiguration--storage-account-container
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true
                - name: WowzaConfiguration:StorageEndpoint
                  value: wowzaconfiguration--storage-account-endpoint
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true
                - name: WowzaConfiguration:ManagedIdentityClientId
                  value: wowzaconfiguration--managedidentityclientid
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true

                # CVP Configuration
                - name: CvpConfiguration:StorageAccountName
                  value: CvpConfiguration--StorageAccountName
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true
                - name: CvpConfiguration:StorageAccountKey
                  value: CvpConfiguration--StorageAccountKey
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true
                - name: CvpConfiguration:StorageContainerName
                  value: CvpConfiguration--StorageContainerName
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true
                - name: CvpConfiguration:StorageEndpoint
                  value: CvpConfiguration--StorageEndpoint
                  keyVaultName: vh-infra-core-${{ variables.env }}
                  secret: true

                # Kinly Configuration
                - name: KinlyConfiguration:ConferencePhoneNumber
                  value: $(ConferencePhoneNumber)
                - name: KinlyConfiguration:ConferencePhoneNumberWelsh
                  value: $(ConferencePhoneNumberWelsh)
                - name: KinlyConfiguration:ApiUrl
                  value: $(KinlyApiUrl)
                - name: KinlyConfiguration:SelfTestApiUrl
                  value: $(KinlySelfTestApiUrl)
                - name: KinlyConfiguration:ConferenceUsername
                  value: $(ConferenceUsername)
                - name: KinlyConfiguration:CallbackUri
                  value: $(CallbackUri)
                - name: KinlyConfiguration:SipAddressStem
                  value: $(KinlySipAddressStem)
                - name: KinlyConfiguration:SipAddressStem
                  value: KinlyConfiguration--SipAddressStem
                  keyVaultName: vh-video-api-${{ variables.env }}
                  secret: true

                # Vodafone Configuration
                - name: VodafoneConfiguration:ConferencePhoneNumber
                  value: $(ConferencePhoneNumber)
                - name: VodafoneConfiguration:ConferencePhoneNumberWelsh
                  value: $(ConferencePhoneNumberWelsh)
                - name: VodafoneConfiguration:ApiUrl
                  value: $(VodafoneApiUrl)
                - name: VodafoneConfiguration:SelfTestApiUrl
                  value: $(VodafoneSelfTestApiUrl)
                - name: VodafoneConfiguration:ConferenceUsername
                  value: $(ConferenceUsername)
                - name: VodafoneConfiguration:CallbackUri
                  value: $(CallbackUri)
                - name: VodafoneConfiguration:SipAddressStem
                  value: VodafoneConfiguration--SipAddressStem
                  keyVaultName: vh-video-api-${{ variables.env }}
                  secret: true

                # Quick Links Configuration
                - name: QuickLinks:Issuer
                  value: $(Issuer)
                - name: QuickLinks:RsaPrivateKey
                  value: $(RsaPrivateKey)
                - name: QuickLinks:ValidAudience
                  value: $(ValidAudience)
